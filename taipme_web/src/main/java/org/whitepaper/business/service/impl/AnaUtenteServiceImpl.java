/*
 * Created on 2022-11-03 ( Time 15:15:46 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package org.whitepaper.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.whitepaper.bean.AnaUtente;
import org.whitepaper.bean.jpa.AnaUtenteEntity;
import org.whitepaper.business.service.AnaUtenteService;
import org.whitepaper.business.service.mapping.AnaUtenteServiceMapper;
import org.whitepaper.data.repository.jpa.AnaUtenteJpaRepository;
import org.whitepaper.utility.EncoderGenerator;

/**
 * Implementation of AnaUtenteService
 */
@Component
@Transactional
public class AnaUtenteServiceImpl implements AnaUtenteService {

	@Resource
	private AnaUtenteJpaRepository anaUtenteJpaRepository;

	@Resource
	private AnaUtenteServiceMapper anaUtenteServiceMapper;
	
	@Override
	public AnaUtente findById(Integer idUte) {
		AnaUtenteEntity anaUtenteEntity = anaUtenteJpaRepository.findOne(idUte);
		return anaUtenteServiceMapper.mapAnaUtenteEntityToAnaUtente(anaUtenteEntity);
	}

	@Override
	public List<AnaUtente> findAll() {
		Iterable<AnaUtenteEntity> entities = anaUtenteJpaRepository.findAll();
		List<AnaUtente> beans = new ArrayList<AnaUtente>();
		for(AnaUtenteEntity anaUtenteEntity : entities) {
			beans.add(anaUtenteServiceMapper.mapAnaUtenteEntityToAnaUtente(anaUtenteEntity));
		}
		return beans;
	}

	@Override
	public AnaUtente save(AnaUtente anaUtente) {
		return update(anaUtente) ;
	}

	@Override
	public AnaUtente create(AnaUtente anaUtente) {
		
		/***
		AnaUtenteEntity anaUtenteEntity = anaUtenteJpaRepository.findOne(anaUtente.getIdUte());
		if( anaUtenteEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		*/
		
		AnaUtenteEntity anaUtenteEntity = new AnaUtenteEntity();
		anaUtenteServiceMapper.mapAnaUtenteToAnaUtenteEntity(anaUtente, anaUtenteEntity);
		anaUtenteEntity.setDatUltMov( Calendar.getInstance().getTime() );
		anaUtenteEntity.setDatCreUte( Calendar.getInstance().getTime() );
		anaUtenteEntity.setPwd(EncoderGenerator.encode(anaUtente.getPwd()));
		AnaUtenteEntity anaUtenteEntitySaved = anaUtenteJpaRepository.save(anaUtenteEntity);
		return anaUtenteServiceMapper.mapAnaUtenteEntityToAnaUtente(anaUtenteEntitySaved);
	}

	@Override
	public AnaUtente update(AnaUtente anaUtente) {
		AnaUtenteEntity anaUtenteEntity = anaUtenteJpaRepository.findOne(anaUtente.getIdUte());
		anaUtenteServiceMapper.mapAnaUtenteToAnaUtenteEntity(anaUtente, anaUtenteEntity);
		anaUtenteEntity.setDatUltMov( Calendar.getInstance().getTime() );
		anaUtenteEntity.setDatCreUte( Calendar.getInstance().getTime() );
		AnaUtenteEntity anaUtenteEntitySaved = anaUtenteJpaRepository.save(anaUtenteEntity);
		return anaUtenteServiceMapper.mapAnaUtenteEntityToAnaUtente(anaUtenteEntitySaved);
	}

	@Override
	public void delete(Integer idUte) {
		anaUtenteJpaRepository.delete(idUte);
	}

	public AnaUtenteJpaRepository getAnaUtenteJpaRepository() {
		return anaUtenteJpaRepository;
	}

	public void setAnaUtenteJpaRepository(AnaUtenteJpaRepository anaUtenteJpaRepository) {
		this.anaUtenteJpaRepository = anaUtenteJpaRepository;
	}

	public AnaUtenteServiceMapper getAnaUtenteServiceMapper() {
		return anaUtenteServiceMapper;
	}

	public void setAnaUtenteServiceMapper(AnaUtenteServiceMapper anaUtenteServiceMapper) {
		this.anaUtenteServiceMapper = anaUtenteServiceMapper;
	}

}
