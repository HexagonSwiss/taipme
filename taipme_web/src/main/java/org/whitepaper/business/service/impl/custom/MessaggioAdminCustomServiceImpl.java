/*
 * Created on 13 lug 2017 ( Time 12:07:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.whitepaper.business.service.impl.custom;

import java.util.List;
import java.util.Random;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.whitepaper.bean.MessaggioAdmin;
import org.whitepaper.bean.jpa.MessaggioAdminEntity;
import org.whitepaper.business.service.custom.MessaggioAdminCustomService;
import org.whitepaper.business.service.mapping.MessaggioAdminServiceMapper;
import org.whitepaper.data.repository.jpa.custom.AggregateMsgPerCatEntity;
import org.whitepaper.data.repository.jpa.custom.MessaggioAdminCustomJpaRepository;

/**
 * Implementation of AnaUtenteService
 */
@Component
@Transactional(rollbackFor = Exception.class)
public class MessaggioAdminCustomServiceImpl implements MessaggioAdminCustomService {

	private static Logger logger = LoggerFactory.getLogger(MessaggioAdminCustomServiceImpl.class);

	
	@Resource
	private MessaggioAdminCustomJpaRepository messaggioAdminCustomJpaRepository;
	
	@Resource
	private MessaggioAdminServiceMapper messaggioAdminServiceMapper;
	
	
	//restituisce il messaggio admin piu recente per codice messaggio 
	public MessaggioAdmin findByCodTipMsg(@Param("codTipMsg") String codTipMsg) {
		
		MessaggioAdmin messaggioAdmin = null;	
		try {			
			List<MessaggioAdminEntity> listMsgEnt = messaggioAdminCustomJpaRepository.findByCodTipMsg(codTipMsg);
			if ( null==listMsgEnt || listMsgEnt.isEmpty() )
				return messaggioAdmin;
			
			//lettura casuale messaggio
			int numMsg = listMsgEnt.size();
			Random rand = new Random();
			MessaggioAdminEntity messaggioAdminEntity = listMsgEnt.get(rand.nextInt(numMsg));
			if ( null!=messaggioAdminEntity )
				messaggioAdmin = messaggioAdminServiceMapper.mapMessaggioAdminEntityToMessaggioAdmin(messaggioAdminEntity);
			
		} catch (Exception ex) {
			logger.error("******findByCodTipMsg: errore: " + ex.getMessage() );
		}		
		
		return messaggioAdmin;
	}
	
	//numero totale di messaggi validi per tipo
	public int countNumMsgBybCodTipMsg(String codTipMsg) {
		
		int numMsg = 0;	
		try {			
			Integer numMsgValidi = messaggioAdminCustomJpaRepository.countByCodTipMsg(codTipMsg);
			if ( null!=numMsgValidi )
				numMsg = numMsgValidi.intValue();
						
		} catch (Exception ex) {
			logger.error("******countNumMsgBybCodTipMsg: errore: " + ex.getMessage() );
		}		
		
		return numMsg;
	}
	
	//count messaggi validi per ogni categoria
	public List<AggregateMsgPerCatEntity> countNumMsgValidiPerCat(String codTipMsg) {
		
		List<AggregateMsgPerCatEntity> listNumMsgPerCat = null;
		try {			
			listNumMsgPerCat = messaggioAdminCustomJpaRepository.countNumMsgValidiPerCat(codTipMsg);
						
		} catch (Exception ex) {
			logger.error("******countNumMsgValidiPerCat: errore: " + ex.getMessage() );
		}		
		
		return listNumMsgPerCat;
	}
}
