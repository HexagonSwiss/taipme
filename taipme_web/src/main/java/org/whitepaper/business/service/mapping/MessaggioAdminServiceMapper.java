/*
 * Created on 9 gen 2023 ( Time 14:26:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.whitepaper.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.whitepaper.bean.MessaggioAdmin;
import org.whitepaper.bean.jpa.CatMessaggioEntity;
import org.whitepaper.bean.jpa.MessaggioAdminEntity;
import org.whitepaper.bean.jpa.TipMessaggioEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class MessaggioAdminServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public MessaggioAdminServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'MessaggioAdminEntity' to 'MessaggioAdmin'
	 * @param messaggioAdminEntity
	 */
	public MessaggioAdmin mapMessaggioAdminEntityToMessaggioAdmin(MessaggioAdminEntity messaggioAdminEntity) {
		if(messaggioAdminEntity == null) {
			return null;
		}

		//--- Generic mapping 
		MessaggioAdmin messaggioAdmin = map(messaggioAdminEntity, MessaggioAdmin.class);

		//--- Link mapping ( link to TipMessaggio )
		if(messaggioAdminEntity.getTipMessaggio() != null) {
			messaggioAdmin.setCodTipMsg(messaggioAdminEntity.getTipMessaggio().getCodTipMsg());
			messaggioAdmin.setDesTipMsg(messaggioAdminEntity.getTipMessaggio().getDesTipMsg());
		}
		//--- Link mapping ( link to CatMessaggio )
		if(messaggioAdminEntity.getCatMessaggio() != null) {
			messaggioAdmin.setCatMsg(messaggioAdminEntity.getCatMessaggio().getCatMsg());
			messaggioAdmin.setDesCatMsg(messaggioAdminEntity.getCatMessaggio().getDesCatMsg());
		}
		return messaggioAdmin;
	}
	
	/**
	 * Mapping from 'MessaggioAdmin' to 'MessaggioAdminEntity'
	 * @param messaggioAdmin
	 * @param messaggioAdminEntity
	 */
	public void mapMessaggioAdminToMessaggioAdminEntity(MessaggioAdmin messaggioAdmin, MessaggioAdminEntity messaggioAdminEntity) {
		if(messaggioAdmin == null) {
			return;
		}

		//--- Generic mapping 
		map(messaggioAdmin, messaggioAdminEntity);

		//--- Link mapping ( link : messaggioAdmin )
		if( hasLinkToTipMessaggio(messaggioAdmin) ) {
			TipMessaggioEntity tipMessaggio1 = new TipMessaggioEntity();
			tipMessaggio1.setCodTipMsg( messaggioAdmin.getCodTipMsg() );
			messaggioAdminEntity.setTipMessaggio( tipMessaggio1 );
		} else {
			messaggioAdminEntity.setTipMessaggio( null );
		}

		//--- Link mapping ( link : messaggioAdmin )
		if( hasLinkToCatMessaggio(messaggioAdmin) ) {
			CatMessaggioEntity catMessaggio2 = new CatMessaggioEntity();
			catMessaggio2.setCatMsg( messaggioAdmin.getCatMsg() );
			messaggioAdminEntity.setCatMessaggio( catMessaggio2 );
		} else {
			messaggioAdminEntity.setCatMessaggio( null );
		}

	}
	
	/**
	 * Verify that TipMessaggio id is valid.
	 * @param TipMessaggio TipMessaggio
	 * @return boolean
	 */
	private boolean hasLinkToTipMessaggio(MessaggioAdmin messaggioAdmin) {
		if(messaggioAdmin.getCodTipMsg() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that CatMessaggio id is valid.
	 * @param CatMessaggio CatMessaggio
	 * @return boolean
	 */
	private boolean hasLinkToCatMessaggio(MessaggioAdmin messaggioAdmin) {
		if(messaggioAdmin.getCatMsg() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}