/*
 * Created on 22 nov 2022 ( Time 14:08:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.whitepaper.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.whitepaper.bean.Messaggio;
import org.whitepaper.bean.jpa.AnaUtenteEntity;
import org.whitepaper.bean.jpa.MessaggioEntity;
import org.whitepaper.bean.jpa.TipMessaggioEntity;
import org.whitepaper.utility.ConstantsDefinition;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class MessaggioServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public MessaggioServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'MessaggioEntity' to 'Messaggio'
	 * @param messaggioEntity
	 */
	public Messaggio mapMessaggioEntityToMessaggio(MessaggioEntity messaggioEntity) {
		if(messaggioEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Messaggio messaggio = map(messaggioEntity, Messaggio.class);

		//--- Link mapping ( link to AnaUtente )
		if(messaggioEntity.getAnaUtente() != null) {
			messaggio.setIdUteAut(messaggioEntity.getAnaUtente().getIdUte());
			messaggio.setEmailAut(messaggioEntity.getAnaUtente().getEmail());
			
			messaggio.setMsgUteReg(false);
			if ( null!=messaggioEntity.getAnaUtente().getTipProfilo()
					&& null!=messaggioEntity.getAnaUtente().getTipProfilo().getCodTipPrf()
					&& messaggioEntity.getAnaUtente().getTipProfilo().getCodTipPrf().equals(ConstantsDefinition.CODPFL_UTEREG) )
				messaggio.setMsgUteReg(true);
			
		}
		//--- Link mapping ( link to AnaUtente )
		if(messaggioEntity.getAnaUtente2() != null) {
			messaggio.setIdUteReply(messaggioEntity.getAnaUtente2().getIdUte());
		}
		//--- Link mapping ( link to TipMessaggio )
		if(messaggioEntity.getTipMessaggio() != null) {
			messaggio.setCodTipMsg(messaggioEntity.getTipMessaggio().getCodTipMsg());
			messaggio.setDesTipMsg(messaggioEntity.getTipMessaggio().getDesTipMsg());
		}
		return messaggio;
	}
	
	/**
	 * Mapping from 'Messaggio' to 'MessaggioEntity'
	 * @param messaggio
	 * @param messaggioEntity
	 */
	public void mapMessaggioToMessaggioEntity(Messaggio messaggio, MessaggioEntity messaggioEntity) {
		if(messaggio == null) {
			return;
		}

		//--- Generic mapping 
		map(messaggio, messaggioEntity);

		//--- Link mapping ( link : messaggio )
		if( hasLinkToAnaUtenteAut(messaggio) ) {
			AnaUtenteEntity anaUtente1 = new AnaUtenteEntity();
			anaUtente1.setIdUte( messaggio.getIdUteAut() );
			messaggioEntity.setAnaUtente( anaUtente1 );
		} else {
			messaggioEntity.setAnaUtente( null );
		}

		//--- Link mapping ( link : messaggio )
		if( hasLinkToAnaUtenteReply(messaggio) ) {
			AnaUtenteEntity anaUtente2 = new AnaUtenteEntity();
			anaUtente2.setIdUte( messaggio.getIdUteReply() );
			messaggioEntity.setAnaUtente2( anaUtente2 );
		} else {
			messaggioEntity.setAnaUtente2( null );
		}

		//--- Link mapping ( link : messaggio )
		if( hasLinkToTipMessaggio(messaggio) ) {
			TipMessaggioEntity tipMessaggio3 = new TipMessaggioEntity();
			tipMessaggio3.setCodTipMsg( messaggio.getCodTipMsg() );
			messaggioEntity.setTipMessaggio( tipMessaggio3 );
		} else {
			messaggioEntity.setTipMessaggio( null );
		}

	}
	
	/**
	 * Verify that AnaUtente id is valid.
	 * @param AnaUtente AnaUtente
	 * @return boolean
	 */
	private boolean hasLinkToAnaUtenteAut(Messaggio messaggio) {
		if(messaggio.getIdUteAut() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that AnaUtente id is valid.
	 * @param AnaUtente AnaUtente
	 * @return boolean
	 */
	private boolean hasLinkToAnaUtenteReply(Messaggio messaggio) {
		if(messaggio.getIdUteReply() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that TipMessaggio id is valid.
	 * @param TipMessaggio TipMessaggio
	 * @return boolean
	 */
	private boolean hasLinkToTipMessaggio(Messaggio messaggio) {
		if(messaggio.getCodTipMsg() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}