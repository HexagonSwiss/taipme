/*
 * Created on 13 lug 2017 ( Time 12:07:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.whitepaper.business.service.impl.custom;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.whitepaper.bean.jpa.MessaggioStatEntity;
import org.whitepaper.business.service.custom.MessaggioStatCustomService;
import org.whitepaper.data.repository.jpa.MessaggioStatJpaRepository;
import org.whitepaper.data.repository.jpa.custom.AggregateMsgPerDatPub;

@Component
@Transactional(rollbackFor = Exception.class)
public class MessaggioStatCustomServiceImpl implements MessaggioStatCustomService {

	private static Logger logger = LoggerFactory.getLogger(MessaggioStatCustomServiceImpl.class);

	@Resource
	MessaggioStatJpaRepository messaggioStatJpaRepository;
	
	//conta numero messaggi per tipo dopo la data in input
	public List<AggregateMsgPerDatPub> countNumMessaggiPerTipoAfterDataIn(String codTipMsg, Date dataAfter) {
		
		List<AggregateMsgPerDatPub> listNumMsg = null;	
		try {			
			
			List<MessaggioStatEntity> listMsgStaEn = messaggioStatJpaRepository.findByCodTipMsgAfterDataIn(codTipMsg, dataAfter);
			if ( null==listMsgStaEn || listMsgStaEn.isEmpty() )
				return listNumMsg;
			
			listNumMsg = new ArrayList<AggregateMsgPerDatPub>();
			for (MessaggioStatEntity messaggioStatEntity : listMsgStaEn) {
				
				if ( null==messaggioStatEntity)
					continue;
												
				AggregateMsgPerDatPub aggregateMsgPerDatPub = new AggregateMsgPerDatPub( messaggioStatEntity.getDataUltMovMsg(), 
																						 new Long(messaggioStatEntity.getNumMsg()));
				
				//nel caso di UTEATT, contiene il numero di UTENTI registrati
				aggregateMsgPerDatPub.setDesNotMsg(messaggioStatEntity.getDesNotMsg() );
				
				listNumMsg.add(aggregateMsgPerDatPub);
			}
			
		} catch (Exception ex) {
			logger.error("******countNumMessaggiPerTipoAfterDataIn: errore: " + ex.getMessage() );
		}		
		
		return listNumMsg;
	}
	
	//conta numero messaggi dopo la data in input
	public List<AggregateMsgPerDatPub> countNumMessaggiAfterDataIn(String codTipMsg, Date dataAfter) {
		
		List<AggregateMsgPerDatPub> listNumMsg = null;	
		try {			
			
			List<MessaggioStatEntity> listMsgStaEn = messaggioStatJpaRepository.findByCodTipMsgAfterDataIn(codTipMsg, dataAfter);
			if ( null==listMsgStaEn || listMsgStaEn.isEmpty() )
				return listNumMsg;
			
			listNumMsg = new ArrayList<AggregateMsgPerDatPub>();
			for (MessaggioStatEntity messaggioStatEntity : listMsgStaEn) {
				
				if ( null==messaggioStatEntity)
					continue;
												
				AggregateMsgPerDatPub aggregateMsgPerDatPub = new AggregateMsgPerDatPub( messaggioStatEntity.getDataUltMovMsg(), 
																						 new Long(messaggioStatEntity.getNumMsg()));
				listNumMsg.add(aggregateMsgPerDatPub);
			}
			
		} catch (Exception ex) {
			logger.error("******countNumMessaggiAfterDataIn: errore: " + ex.getMessage() );
		}		
		
		return listNumMsg;
	}
	

}
