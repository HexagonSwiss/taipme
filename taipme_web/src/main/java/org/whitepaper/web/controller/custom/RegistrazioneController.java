/*
 * Created on 13 lug 2017 ( Time 12:06:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.whitepaper.web.controller.custom;

import java.util.Calendar;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.whitepaper.bean.AnaUtente;
import org.whitepaper.business.service.custom.GestUtenteService;
import org.whitepaper.utility.ConstantsDefinition;
import org.whitepaper.utility.EncoderGenerator;
import org.whitepaper.utility.UtilityFunction;
import org.whitepaper.web.common.AbstractController;
import org.whitepaper.web.common.FormMode;
import org.whitepaper.web.common.Message;
import org.whitepaper.web.common.MessageType;
import org.whitepaper.web.common.custom.SecurityHelper;

/**
 * Spring MVC controller for 'AnaUtente' management.
 */
@Controller
@RequestMapping(value="/registrazione")
public class RegistrazioneController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "anaUtente";
		
	
	private static final String JSP_REG  = "registrazione";
	private static final String JSP_REG_OK  = "registrazioneok";
	private static final String SAVE_ACTION_REGISTRAZIONE   = "/registrazione/new";
	private static final String JSP_LOGIN  = "redirect:/login";	


	//--- Main entity service
	@Resource
    private GestUtenteService gestUtenteService; // Injected by Spring
	

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public RegistrazioneController() {
		super(RegistrazioneController.class, MAIN_ENTITY_NAME );
		log("RegistrazioneController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param anaUtente
	 */
	private void populateModel(Model model, AnaUtente anaUtente, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, anaUtente);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_REGISTRAZIONE); 								
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_REGISTRAZIONE); 						
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	
	
	@RequestMapping(value="")
	public String formForRegistrazione(Model model) {
		log("Action 'formForRegistrazione'");
		
		//check se utente eseguito login
		Integer idUtente = SecurityHelper.getIdUser();		
		if ( null!=idUtente ) {			
			return "redirect:/reg/1";
		}				
		
		//--- Populates the model with a new instance
		AnaUtente anaUtente = new AnaUtente();	
		populateModel( model, anaUtente, FormMode.CREATE);
			
		return JSP_REG;
	}
	
	@RequestMapping(value = "/new" ) // GET or POST
	public String newUser(AnaUtente anaUtente, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {				
				// campi audit
				anaUtente.setDatCreUte(Calendar.getInstance().getTime());				
				anaUtente.setDatUltMov(Calendar.getInstance().getTime());
				
				//controllo campi obbligatori
				if ( UtilityFunction.isFieldBlank(anaUtente.getEmail()) ) {
					messageHelper.addMessage(model, new Message(MessageType.DANGER, "NotNull.anaUtente.email"));
					populateModel( model, anaUtente, FormMode.CREATE);
					return JSP_REG;
				}
				if ( UtilityFunction.isFieldBlank(anaUtente.getPwd()) ) {
					messageHelper.addMessage(model, new Message(MessageType.DANGER, "NotNull.anaUtente.pwd"));
					populateModel( model, anaUtente, FormMode.CREATE);
					return JSP_REG;
				}
				if ( !anaUtente.getEmail().equalsIgnoreCase(anaUtente.getEmailConf() )) {
					messageHelper.addMessage(model, new Message(MessageType.DANGER, "NotNull.anaUtente.email.diverse"));
					populateModel( model, anaUtente, FormMode.CREATE);
					return JSP_REG;
				}
				if ( !anaUtente.getPwd().equalsIgnoreCase(anaUtente.getPwdConf() )) {
					messageHelper.addMessage(model, new Message(MessageType.DANGER, "NotNull.anaUtente.pwd.diverse"));
					populateModel( model, anaUtente, FormMode.CREATE);
					return JSP_REG;
				}
								
				//controllo univocita email
				String error = gestUtenteService.checkUsernameMail(anaUtente.getEmail());
				if (error != null){
					messageHelper.addMessage(model, new Message(MessageType.DANGER, error));
					populateModel( model, anaUtente, FormMode.CREATE);
					return JSP_REG;
				}
				
				//untete pubblico in attesa di conferma
				anaUtente.setCodTipPrf(ConstantsDefinition.CODPFL_UTEANY);
				anaUtente.setPwd(EncoderGenerator.encode(anaUtente.getPwd()));				
				anaUtente.setConUid( UUID.randomUUID().toString());				

				//save utente e invio email
				String linkConferma = getFullServerContextPath(httpServletRequest) +"/registrazione/" + anaUtente.getConUid();
				AnaUtente anaUtenteCreated = gestUtenteService.insertUtente(anaUtente, linkConferma);
				
				model.addAttribute(MAIN_ENTITY_NAME, anaUtenteCreated);
				
				messageHelper.addMessage(model, new Message(MessageType.SUCCESS,"anaUtente.registrazione_conferma"));
				return JSP_REG_OK;
			} else {
				populateModel( model, anaUtente, FormMode.CREATE);
				
				return JSP_REG;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "anaUtente.error.registrazione", new Exception());
			//messageHelper.addMessage(redirectAttributes, new Message(MessageType.DANGER,"anaUtente.error.registrazione"));
			populateModel( model, anaUtente, FormMode.CREATE);
						
			return JSP_REG;
		}
	}
	
	
	@RequestMapping(value = "/{conUid}" ) // GET or POST
	public String confirmUser( @PathVariable("conUid") String conUid, Model model, HttpServletRequest httpServletRequest, RedirectAttributes redirectAttributes) {
		log("Action 'confirmUser'");
		try {
			
			//lettura utente	
			AnaUtente anaUtente = gestUtenteService.findUtenteByConUid(conUid);
			
			//errore=id utente se tutto ok				 
			String errore = gestUtenteService.confermaUtente(anaUtente);				
			if ( errore!=null ) {					
				// uid non trovato dare errore
				messageHelper.addMessage(model, new Message(MessageType.DANGER,errore));										
				return formForRegistrazione( model);
			} 
				
			//
			//---
			messageHelper.addMessage(model, new Message(MessageType.SUCCESS,"conf.ok"));
			redirectAttributes.addFlashAttribute("msgConfOk", "Registrazione eseguita con successo. E' possibile effettuare il login");
						
			return JSP_LOGIN;
		
		} catch(Exception e) {
			AnaUtente anaUtente = new AnaUtente();
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "anaUtente.error.create", e);
			populateModel( model, anaUtente, FormMode.CREATE);
			
			return JSP_REG;
		}
	}

}
