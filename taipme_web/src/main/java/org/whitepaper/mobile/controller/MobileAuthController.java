package org.whitepaper.mobile.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.PostConstruct;

import org.whitepaper.business.service.impl.custom.JwtTokenService;
import org.whitepaper.mobile.dto.JwtResponse;
import org.whitepaper.mobile.dto.JwtRequest;
import org.whitepaper.bean.AnaUtente;

@RestController
@RequestMapping("/mobile/auth")
public class MobileAuthController {

	private static final Logger logger = LoggerFactory.getLogger(MobileAuthController.class);

	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private org.whitepaper.business.service.AnaUtenteService anaUtenteService;

	@Autowired
	private JwtTokenService jwtTokenService;

	@PostConstruct
	public void init() {
		logger.info("MobileAuthController bean created: {}", this);
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) {
		logger.debug("Attempting authentication for user: {}", authenticationRequest.getUsername());

		try {
			Authentication authentication = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(
							authenticationRequest.getUsername(),
							authenticationRequest.getPassword()));

			UserDetails userDetails = (UserDetails) authentication.getPrincipal();
			final String token = jwtTokenService.generateToken(userDetails);

			logger.debug("Authentication successful for user: {}. Returning JWT.", userDetails.getUsername());
			return ResponseEntity.ok(new JwtResponse(token, userDetails.getUsername()));

		} catch (BadCredentialsException e) {
			logger.warn("Authentication failed for user: {}", authenticationRequest.getUsername(), e);
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid username or password");

		} catch (Exception e) {
			logger.error("An error occurred during authentication for user: {}", authenticationRequest.getUsername(),
					e);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An internal server error occurred");
		}
	}

    // TEMPORARY ENDPOINT TO CREATE A TEST USER - REMOVE THIS IMMEDIATELY AFTER USE!
    @RequestMapping(value = "/createTestUser", method = RequestMethod.GET) // Using GET for simplicity
    public ResponseEntity<String> createTestUser() {
        try {
            // Create a new AnaUtente bean with test data based on the real AnaUtente class
            AnaUtente testUser = new AnaUtente();

            // Set required fields based on @NotNull in AnaUtente
            testUser.setIdUte(null); // ID should be generated by DB for creation
            testUser.setEmail("testuser@example.com"); // Required: Email will likely be the username for login
            testUser.setPwd("password123"); // Required: Your test password (will be encoded by service)
            testUser.setCodTipPrf("USR"); // Required: Example profile type code (replace with a valid code from your system)
            testUser.setUsername("testuser"); // Optional but good to set for clarity

            // Do NOT set datCreUte or datUltMov - AnaUtenteServiceImpl.create does this

            // Call the service to create the user (password will be encoded by the service)
            anaUtenteService.create(testUser);

            logger.info("TEMPORARY: Successfully created test user: testuser@example.com");
            return ResponseEntity.ok("Test user 'testuser@example.com' created successfully (Password: password123). REMOVE THIS ENDPOINT NOW!");

        } catch (Exception e) {
            logger.error("TEMPORARY: Failed to create test user", e);
            // Check logs for detailed exception if creation fails
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to create test user: " + e.getMessage());
        }
    }
}
