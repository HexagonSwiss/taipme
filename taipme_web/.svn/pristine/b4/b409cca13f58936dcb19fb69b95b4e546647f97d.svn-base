/*
 * Created on 19 gen 2023 ( Time 08:35:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.whitepaper.web.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.whitepaper.bean.AnaUtente;
import org.whitepaper.bean.Messaggio;
import org.whitepaper.bean.MessaggioSegnalato;
import org.whitepaper.business.service.AnaUtenteService;
import org.whitepaper.business.service.MessaggioSegnalatoService;
import org.whitepaper.business.service.MessaggioService;
import org.whitepaper.business.service.custom.MessaggioSegnalatoCustomService;
import org.whitepaper.web.common.AbstractController;
import org.whitepaper.web.common.FormMode;
import org.whitepaper.web.common.Message;
import org.whitepaper.web.common.MessageType;
import org.whitepaper.web.listitem.AnaUtenteListItem;
import org.whitepaper.web.listitem.MessaggioListItem;

/**
 * Spring MVC controller for 'MessaggioSegnalato' management.
 */
@Controller
@RequestMapping("/messaggioSegnalato")
public class MessaggioSegnalatoController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "messaggioSegnalato";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "messaggioSegnalato/form";
	private static final String JSP_LIST   = "messaggioSegnalato/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/messaggioSegnalato/create";
	private static final String SAVE_ACTION_UPDATE   = "/messaggioSegnalato/update";

	//--- Main entity service
	@Resource
    private MessaggioSegnalatoService messaggioSegnalatoService; // Injected by Spring
	
	@Resource
    private MessaggioSegnalatoCustomService messaggioSegnalatoCustomService;
	
	//--- Other service(s)
	@Resource
    private MessaggioService messaggioService; // Injected by Spring
	@Resource
    private AnaUtenteService anaUtenteService; // Injected by Spring

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public MessaggioSegnalatoController() {
		super(MessaggioSegnalatoController.class, MAIN_ENTITY_NAME );
		log("MessaggioSegnalatoController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
	/**
	 * Populates the combo-box "items" for the referenced entity "Messaggio"
	 * @param model
	 */
	private void populateListOfMessaggioItems(Model model) {
		List<Messaggio> list = messaggioService.findAll();
		List<MessaggioListItem> items = new LinkedList<MessaggioListItem>();
		for ( Messaggio messaggio : list ) {
			items.add(new MessaggioListItem( messaggio ) );
		}
		model.addAttribute("listOfMessaggioItems", items ) ;
	}

	/**
	 * Populates the combo-box "items" for the referenced entity "AnaUtente"
	 * @param model
	 */
	private void populateListOfAnaUtenteItems(Model model) {
		List<AnaUtente> list = anaUtenteService.findAll();
		List<AnaUtenteListItem> items = new LinkedList<AnaUtenteListItem>();
		for ( AnaUtente anaUtente : list ) {
			items.add(new AnaUtenteListItem( anaUtente ) );
		}
		model.addAttribute("listOfAnaUtenteItems", items ) ;
	}


	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param messaggioSegnalato
	 */
	private void populateModel(Model model, MessaggioSegnalato messaggioSegnalato, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, messaggioSegnalato);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfMessaggioItems(model);
			populateListOfAnaUtenteItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfMessaggioItems(model);
			populateListOfAnaUtenteItems(model);
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of MessaggioSegnalato found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'list'");
		List<MessaggioSegnalato> list = messaggioSegnalatoService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new MessaggioSegnalato
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		MessaggioSegnalato messaggioSegnalato = new MessaggioSegnalato();	
		populateModel( model, messaggioSegnalato, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing MessaggioSegnalato
	 * @param model Spring MVC model
	 * @param idMsgSegn  primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{idMsgSegn}")
	public String formForUpdate(Model model, @PathVariable("idMsgSegn") Integer idMsgSegn ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		MessaggioSegnalato messaggioSegnalato = messaggioSegnalatoService.findById(idMsgSegn);
		populateModel( model, messaggioSegnalato, FormMode.UPDATE);		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param messaggioSegnalato  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(MessaggioSegnalato messaggioSegnalato, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				MessaggioSegnalato messaggioSegnalatoCreated = messaggioSegnalatoService.create(messaggioSegnalato); 
				model.addAttribute(MAIN_ENTITY_NAME, messaggioSegnalatoCreated);

				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				return redirectToForm(httpServletRequest, messaggioSegnalatoCreated.getIdMsgSegn() );
			} else {
				populateModel( model, messaggioSegnalato, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "messaggioSegnalato.error.create", e);
			populateModel( model, messaggioSegnalato, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param messaggioSegnalato  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(MessaggioSegnalato messaggioSegnalato, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				//--- Perform database operations
				MessaggioSegnalato messaggioSegnalatoSaved = messaggioSegnalatoService.update(messaggioSegnalato);
				model.addAttribute(MAIN_ENTITY_NAME, messaggioSegnalatoSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, messaggioSegnalatoSaved.getIdMsgSegn());
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, messaggioSegnalato, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "messaggioSegnalato.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, messaggioSegnalato, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param idMsgSegn  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{idMsgSegn}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("idMsgSegn") Integer idMsgSegn) {
		log("Action 'delete'" );
		try {
			messaggioSegnalatoService.delete( idMsgSegn );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "messaggioSegnalato.error.delete", e);
		}
		return redirectToList();
	}

	@RequestMapping(value = "/verifica/{idMsgSegn}") // GET or POST
	public String verifica(Model model, RedirectAttributes redirectAttributes, @PathVariable("idMsgSegn") Integer idMsgSegn) {
		log("Action 'verifica'" );
		try {
			
			//lettura messaggio segnalato
			MessaggioSegnalato msg = messaggioSegnalatoService.findById(idMsgSegn);
			model.addAttribute(MAIN_ENTITY_NAME, msg);
				
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "messaggioSegnalato.error.verifica", e);
		}
		return "messaggioSegnalato/verifica";
	}
	
	@RequestMapping(value = "/confermasegnalazione/{idMsgSegn}/{idMsg}") // GET or POST
	public String confermasegnalazione(Model model, RedirectAttributes redirectAttributes
			, @PathVariable("idMsgSegn") Integer idMsgSegn, @PathVariable("idMsg") Integer idMsg) {
		log("Action 'confermasegnalazione'" );
		try {
			
			//aggiornamento conferma della segnalazione messaggio offensivo
			boolean isOk = messaggioSegnalatoCustomService.confermaSegnalazione(idMsgSegn, idMsg);
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"messaggioSegnalato.conferma.ok"));
				
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "messaggioSegnalato.error.conferma", e);
		}
		return "redirect:/messaggioSegnalato";
	}
	
	@RequestMapping(value = "/annullasegnalazione/{idMsgSegn}/{idMsg}") // GET or POST
	public String annullasegnalazione(Model model, RedirectAttributes redirectAttributes
			, @PathVariable("idMsgSegn") Integer idMsgSegn) {
		log("Action 'annullasegnalazione'" );
		try {
			
			//cancellazione segnalazione 
			messaggioSegnalatoService.delete(idMsgSegn);
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"messaggioSegnalato.annulla.ok"));
				
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "messaggioSegnalato.error.annulla", e);
		}
		return "redirect:/messaggioSegnalato";
	}
}
