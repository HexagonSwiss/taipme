/*
 * Created on 2022-11-03 ( Time 15:15:46 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package org.whitepaper.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.whitepaper.bean.MessaggioTags;
import org.whitepaper.bean.jpa.MessaggioTagsEntity;
import org.whitepaper.business.service.MessaggioTagsService;
import org.whitepaper.business.service.mapping.MessaggioTagsServiceMapper;
import org.whitepaper.data.repository.jpa.MessaggioTagsJpaRepository;

/**
 * Implementation of MessaggioTagsService
 */
@Component
@Transactional
public class MessaggioTagsServiceImpl implements MessaggioTagsService {

	@Resource
	private MessaggioTagsJpaRepository messaggioTagsJpaRepository;

	@Resource
	private MessaggioTagsServiceMapper messaggioTagsServiceMapper;
	
	@Override
	public MessaggioTags findById(Integer idTag) {
		MessaggioTagsEntity messaggioTagsEntity = messaggioTagsJpaRepository.findOne(idTag);
		return messaggioTagsServiceMapper.mapMessaggioTagsEntityToMessaggioTags(messaggioTagsEntity);
	}

	@Override
	public List<MessaggioTags> findAll() {
		Iterable<MessaggioTagsEntity> entities = messaggioTagsJpaRepository.findAll();
		List<MessaggioTags> beans = new ArrayList<MessaggioTags>();
		for(MessaggioTagsEntity messaggioTagsEntity : entities) {
			beans.add(messaggioTagsServiceMapper.mapMessaggioTagsEntityToMessaggioTags(messaggioTagsEntity));
		}
		return beans;
	}

	@Override
	public MessaggioTags save(MessaggioTags messaggioTags) {
		return update(messaggioTags) ;
	}

	@Override
	public MessaggioTags create(MessaggioTags messaggioTags) {
		
		MessaggioTagsEntity messaggioTagsEntity = null;
		if ( null!=messaggioTags.getIdTag() )
			messaggioTagsEntity = messaggioTagsJpaRepository.findOne(messaggioTags.getIdTag());
		
		if( messaggioTagsEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		messaggioTagsEntity = new MessaggioTagsEntity();
		messaggioTagsServiceMapper.mapMessaggioTagsToMessaggioTagsEntity(messaggioTags, messaggioTagsEntity);
		messaggioTagsEntity.setDatUltMov( Calendar.getInstance().getTime() );
		MessaggioTagsEntity messaggioTagsEntitySaved = messaggioTagsJpaRepository.save(messaggioTagsEntity);
		return messaggioTagsServiceMapper.mapMessaggioTagsEntityToMessaggioTags(messaggioTagsEntitySaved);
	}

	@Override
	public MessaggioTags update(MessaggioTags messaggioTags) {
		MessaggioTagsEntity messaggioTagsEntity = messaggioTagsJpaRepository.findOne(messaggioTags.getIdTag());
		messaggioTagsServiceMapper.mapMessaggioTagsToMessaggioTagsEntity(messaggioTags, messaggioTagsEntity);
		MessaggioTagsEntity messaggioTagsEntitySaved = messaggioTagsJpaRepository.save(messaggioTagsEntity);
		return messaggioTagsServiceMapper.mapMessaggioTagsEntityToMessaggioTags(messaggioTagsEntitySaved);
	}

	@Override
	public void delete(Integer idTag) {
		messaggioTagsJpaRepository.delete(idTag);
	}

	public MessaggioTagsJpaRepository getMessaggioTagsJpaRepository() {
		return messaggioTagsJpaRepository;
	}

	public void setMessaggioTagsJpaRepository(MessaggioTagsJpaRepository messaggioTagsJpaRepository) {
		this.messaggioTagsJpaRepository = messaggioTagsJpaRepository;
	}

	public MessaggioTagsServiceMapper getMessaggioTagsServiceMapper() {
		return messaggioTagsServiceMapper;
	}

	public void setMessaggioTagsServiceMapper(MessaggioTagsServiceMapper messaggioTagsServiceMapper) {
		this.messaggioTagsServiceMapper = messaggioTagsServiceMapper;
	}

}
